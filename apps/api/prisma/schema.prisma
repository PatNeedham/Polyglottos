datasource db {
  provider = "postgresql"
  directUrl = env("SUPABASE_DIRECT_DATABASE_URL")
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  nativeLanguage String
  dateJoined     DateTime @default(now())
  UserLanguage   UserLanguage[]
  UserTopic      UserTopic[]
  ForumComment   ForumComment[]
  CommentVote    CommentVote[]
}

model Language {
  id           Int           @id @default(autoincrement())
  languageName String
  UserLanguage UserLanguage[]
  Quiz         Quiz[]
  Lesson       Lesson[]
  Topic        Topic[]
}

model UserLanguage {
  userId               Int
  languageId           Int
  lessonsCompleted     Int
  quizzesTaken         Int
  quizzesPassed        Int
  rollingAverageAccuracy Float

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])

  @@id([userId, languageId])
}

model Quiz {
  id         Int      @id @default(autoincrement())
  quizType   String
  languageId Int
  content    String
  answer     String
  LessonQuiz LessonQuiz[]
  ForumComment ForumComment[]

  language Language @relation(fields: [languageId], references: [id])
}

model Lesson {
  id         Int      @id @default(autoincrement())
  languageId Int
  lessonName String

  language Language @relation(fields: [languageId], references: [id])
  LessonQuiz LessonQuiz[]
}

model LessonQuiz {
  lessonId Int
  quizId   Int

  lesson Lesson @relation(fields: [lessonId], references: [id])
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  @@id([lessonId, quizId])
}

model Topic {
  id         Int      @id @default(autoincrement())
  languageId Int
  topicName  String

  language Language @relation(fields: [languageId], references: [id])
  UserTopic UserTopic[]
}

model UserTopic {
  userId  Int
  topicId Int
  completed Boolean

  user  User  @relation(fields: [userId], references: [id])
  topic Topic @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model ForumComment {
  id          Int           @id @default(autoincrement())
  content     String
  createdAt   DateTime      @default(now())
  userId      Int
  quizId      Int
  parentId    Int?          // Nullable for top-level comments
  upvotes     Int           @default(0)
  downvotes   Int           @default(0)
  replies     ForumComment? @relation("CommentReplies", fields: [parentId], references: [id])
  children    ForumComment[] @relation("CommentReplies")

  user        User          @relation(fields: [userId], references: [id])
  quiz        Quiz          @relation(fields: [quizId], references: [id])
  CommentVote CommentVote[]
}

model CommentVote {
  id          Int      @id @default(autoincrement())
  userId      Int
  commentId   Int
  voteType    VoteType

  user        User     @relation(fields: [userId], references: [id])
  comment     ForumComment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}